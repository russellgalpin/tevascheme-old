var path = {
    src: '',
    dest: '',
    styles: {
        src: 'scss',
        files: 'scss/**/*.scss',
        dest: '',
        entryPointFilename: 'main.scss',
        outputFilename: 'style.css',
        includes: [
            'scss'
        ]
    }
};

// vendor prefixes
var autoPrefixBrowserList = ['last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'];

// load all of our dependencies
var gulp            = require('gulp');
var concat          = require('gulp-concat');
var uglify          = require('gulp-uglify');
var sourcemaps      = require('gulp-sourcemaps');
var sass            = require('gulp-sass');
var minifyCSS       = require('gulp-minify-css');
var autoprefixer    = require('gulp-autoprefixer');
var gulpSequence    = require('gulp-sequence').use(gulp);
var shell           = require('gulp-shell');
var del             = require('del');
var header          = require('gulp-header');
var plumber         = require('gulp-plumber');
var gutil           = require('gulp-util');

// Overwrite gulp.src to add error handling to all streams
var gulp_src = gulp.src;
gulp.src = function() {
    return gulp_src.apply(gulp, arguments)
        .pipe(plumber(function(error) {
            // Output an error message
            gutil.log(gutil.colors.red('Error (' + error.plugin + '): ' + error.message));
            // emit the end event, to properly end the task
            this.emit('end');
        }));
};

var pkg = require('./package.json');
var date = new Date();
date.setTime(Date.now());
var dateString = date.toUTCString();
var banner = ['/**',
    ' * DO NOT EDIT THIS FILE!',
    ' * It has been generated from Sass files with a build tool. Please ',
    ' * contact the author for instructions if you need to make any changes.',
    '*/',
''].join('\n');

gulp.task('css', function() {
    return gulp.src(path.styles.src + '/' + path.styles.entryPointFilename) // the main SCSS file, which will just be a file that imports everything
        //.pipe(sourcemaps.init())
        .pipe(sass({ // convert SCSS to CSS
            errLogToConsole: true,
            /*sourceComments: 'map',*/ // create sourcemap for better dev tools workflow
            outputStyle: 'compressed', // minify
            includePaths: path.styles.includes // for @import-ing within SCSS files
        }))
        //.pipe(sourcemaps.write())
        .pipe(autoprefixer({ // add vendor prefixes
            browsers: autoPrefixBrowserList,
            cascade: true
        }))
        .pipe(concat(path.styles.outputFilename)) // the final filename of our combined css file
        .pipe(header(banner, { pkg: pkg, date: dateString }))
        .pipe(gulp.dest(path.styles.dest)) // copy compressed and concatenated css file to destination folder
});

gulp.task('js-global', function() {
    return gulp.src('../js/global/**/*.js')
        .pipe(concat('global.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('../js/'))
});

gulp.task('js-home', function() {
    return gulp.src('../js/home/**/*.js')
        .pipe(concat('home.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('../js/'))
});

gulp.task('js-map', function() {
    return gulp.src('../js/map/**/*.js')
        .pipe(concat('map.min.js'))
        .pipe(uglify())
        .pipe(gulp.dest('../js/'))
});

gulp.task('clean', function(callback) {
    del([path.dest], callback);
});

gulp.task('deploy', gulpSequence(
    'clean',
    [
        'css',
        'js-global',
        'js-home',
        'js-map',
    ]
));

gulp.task('default', ['deploy'], function() { // run the 'deploy' task
    gulp.watch(path.styles.files, ['css']); // watch all Sass files and run the 'css' task when any of them changes
    gulp.watch('../js/global/', ['js-global']); // watch all JS files and run the 'js' task when any of them changes
    gulp.watch('../js/home/', ['js-home']);
    gulp.watch('../js/map/', ['js-map']);
});